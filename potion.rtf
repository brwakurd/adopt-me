{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 for k, v in pairs(Pets) do\
    if v and v.properties and (v.id == "xxx" or v.id == "xxx" or v.id == "xxx") then\
        foundPet = true\
\
        while true do\
            local updatedPets = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets or \{\}\
            local currentPet = nil\
            for _, pet in pairs(updatedPets) do\
                if pet.unique == v['unique'] then\
                    currentPet = pet\
                    break\
                end\
            end\
\
            if currentPet and currentPet.properties and currentPet.properties.age and currentPet.properties.age < 6 then\
                print("Equipping pet with ID " .. currentPet.id .. " and age less than 6:", currentPet['unique'])\
                game:GetService("ReplicatedStorage").API["ToolAPI/Equip"]:InvokeServer(currentPet['unique'])\
\
                for foodKey, foodValue in pairs(Food) do\
                    if foodValue and foodValue.id == "pet_age_potion" then\
                        print("Equipping food with ID pet_age_potion:", foodValue['unique'])\
                        game:GetService("ReplicatedStorage").API["ToolAPI/Equip"]:InvokeServer(foodValue['unique'])\
\
                        wait(1)\
\
                        local args = \{\
                            [1] = "__Enum_PetObjectCreatorType_2",\
                            [2] = \{\
                                ["unique_id"] = foodValue['unique'],\
                                ["possible_grabber_pet_unique"] = currentPet['unique'],\
                                ["pet_unique"] = currentPet['unique'],\
                                ["grab_immediately"] = false\
                            \}\
                        \}\
\
                        local success, err = pcall(function()\
                            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/CreatePetObject"):InvokeServer(unpack(args))\
                        end)\
\
                        if not success then\
                            print("Error invoking CreatePetObject API:", err)\
                        else\
                            print("Successfully invoked CreatePetObject API.")\
                        end\
\
                        wait(10)\
\
                        updatedPets = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets or \{\}\
                        local updatedPet = nil\
                        for _, pet in pairs(updatedPets) do\
                            if pet.unique == currentPet['unique'] then\
                                updatedPet = pet\
                                break\
                            end\
                        end\
\
                        if updatedPet and updatedPet.properties and updatedPet.properties.age and updatedPet.properties.age < 6 then\
                            print("Pet age is still less than 6, repeating process for pet:", currentPet['unique'])\
                        else\
                            print("Pet age is now 6 or older, breaking for this pet:", currentPet['unique'])\
                            break\
                        end\
                    end\
                end\
            else\
                print("Pet age is 6 or older, moving to next pet:", currentPet and currentPet['unique'] or "unknown")\
                break\
            end\
        end\
    end\
end\
\
if not foundPet then\
    print("No eligible pets found with IDs. Exiting loop...")\
    break\
end\
\
wait(5)\
}